{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#sony-headphones-bluetooth-documentation","title":"Sony Headphones Bluetooth Documentation","text":"<p>This page is a collection of information about the Sony Headphones Bluetooth protocol. It is a work in progress and gets updated as we find out more about the protocol. If you have any information that you would like to add, please feel free to submit a pull request.</p> <p>Warning</p> <p>This documentation may contain errors or incorrect information. Use at your own risk. It represents our best understanding of the protocols at this time.</p>"},{"location":"#repository","title":"Repository","text":"<p>The repository for this documentation can be found here.</p>"},{"location":"#license","title":"License","text":"<p>This documentation falls under the public domain via the CC0 1.0 Universal license.</p>"},{"location":"Devices/LinkBuds%20S/","title":"Sony LinkBuds S","text":""},{"location":"Devices/LinkBuds%20S/#commands","title":"Commands","text":"<p>Failure</p> <p>This entire document is being remade. Please check back later.</p> <p>Info</p> <p>RFCOMM over L2CAP is used for communication between the LinkBuds S and the host device. If you are capturing Bluetooth packets, you will see the full RFCOMM data, not just the data payload. Read more about the data structure of RFCOMM frames.</p> <p>The tables below show the packets sent and received for performing a given action. The tables are ordered by the time the Bluetooth messages were sent or received, with the first message at the top.</p>"},{"location":"Devices/LinkBuds%20S/#ambient-sound-control-amsc","title":"Ambient Sound Control (AmSC)","text":"Action Type \"RFCOMM Data\" Payload Enable Noise Cancelling L2CAP Send 09EF 39FF 5A00 1C40 ---- ---- ---- 3E0C 0100 0000 0768 1701 0100 0014 A93C ---- L2CAP Receive 0BEF 1200 FF5A 0009 40DF DA00 A59A AmSC Off L2CAP Send 09EF 39FF 5A00 1C40 ---- ---- ---- 3E0C 0000 0000 0768 1701 0000 0014 A73C 2740"},{"location":"Protocol/L2CAP/","title":"L2CAP","text":"<p>L2CAP is a lower-layer protcol than RFCOMM. It is used to send RFCOMM frames over Bluetooth. When capturing Bluetooth packets, you might encounter L2CAP packets instead of pure RFCOMM packets.</p> <p>Understanding what the entire L2CAP frame looks like is not necessary to understand captured Bluetooth packets. However, roughly knowing what you're looking at and knowing what the actual Data payload is can be helpful.</p>"},{"location":"Protocol/L2CAP/#l2cap-frame","title":"L2CAP Frame","text":"<p>Let's compare an L2CAP frame to an RFCOMM frame:</p> L2CAP Frame RFCOMM frame 09EF 39FF 5A00 1C40 890D EACB 0022 \u0417E\u041e\u0421 0100 0000 0768 1701 0100 0014 A93C 1240 FF5A 001C 4089 0DEA CB00 223E 0C01 0000 0007 6817 0101 0000 14A9 3C12 <p>The bold parts are the parts that are the same in both frames. The rest is L2CAP specific.</p> <p>Note</p> <p>The first Word in the L2CAP Frame (<code>09EF</code>) contains information about the RFCOMM Address and Control Bits. <code>09</code> being the Address, and <code>EF</code> being the Control Bits. </p>"},{"location":"Protocol/RFCOMM/","title":"RFCOMM","text":"<p>The protocol uses the L2CAP and RFCOMM protocols to communicate over Bluetooth. Understanding how an RFCOMM frame is structured is important to understand captured Bluetooth packets.</p>"},{"location":"Protocol/RFCOMM/#rfcomm-frame","title":"RFCOMM Frame","text":"<p>An RFCOMM frame consists of a header, a data section and a Frame Check Sequence (FCS).</p> Position in Bits Name 0-7 Address 8-15 Control 16-23 Length 24-31 Length or Data Data (0 - 32767 Bytes) Last 8 Bits Frame Check Sequence (FCS) <p>Looking at an examplary RFCOMM frame, we can see which part of the frame is what:</p> <pre><code>F3EF 39FF 5A00 1C40 04E0 EA7D 001E 3E0C\n0000 0000 0768 1701 0100 0014 A83C 18B3\n</code></pre> <p>Note</p> <p>\"8 bit\" means eight binary numbers. 2 binary numbers are equivalent to 1 hexadecimal number, so 8 bit are 4 hexadecimal numbers.</p> Data (Hex) RFCOMM Frame Part <code>F3E4</code> Address (The first bit of <code>F3E4</code> is 1, meaning there is only one address octet. See: Extend Address Field) <code>39FF</code> Control <code>5A00</code> Length <code>1C40</code> Length or Data (The first bit of <code>5A00</code> is 0, meaning this is a length field. See: Extend Address Field) <code>04E0 EA7d 001E 3E0C 0000 0000 0768 1701 0100 0014 A83C</code> Data <code>18B3</code> FCS"},{"location":"Protocol/RFCOMM/#extend-address-field","title":"Extend Address Field","text":"<p>The Extend Address (EA) field can extend the address or length fields. To calculate whether the fields will be extended by 8 more bits or not, we need to convert the field from hexadecimal to binary.</p> <p><code>F3E4</code> (Base16) = <code>1111001111100100</code>(Base2)</p> <p>The first bit is the EA bit. If it is set to 0, then extension will occur. If it is set to 1, then no extension will occur.</p>"},{"location":"Protocol/RFCOMM/#extension-of-fields","title":"Extension of Fields","text":"<p>Address Field</p> <p>If EA=0 for the address fields, then more address octets will follow. If EA=1, then the field we are looking at is the last address octet.</p> <p>Length Field</p> <p>If EA=0 for the length field, then the EA bit will be followed by 15 bits of length. If EA=1, then only 7 bits of length will follow.</p>"},{"location":"Protocol/RFCOMM/#reference","title":"Reference","text":"<p>https://web.archive.org/web/20231022193147/https://ptgmedia.pearsoncmg.com/imprint_downloads/informit/bookreg/9780130661067/cr_ch10.pdf</p>"}]}